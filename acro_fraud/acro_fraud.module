<?php
/**
 * @file
 * Acro-Fraud main file.
 */

/**
 * Implements hook_menu()
 */
function acro_fraud_menu(){
  $items = array();
  $items['admin/commerce/config/advanced-settings/fraud'] = array(
      'title'=>'Fraud Detection',
      'page callback'=>'drupal_get_form',
      'page arguments'=> array('acro_fraud_form'),
      'access arguments' => array('administer acro_fraud settings'),
      'access callback' => TRUE,
      'type'=>MENU_NORMAL_ITEM,
  );
  // Tab 1
  $items['admin/commerce/config/advanced-settings/fraud/default'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => 'Possible Fraud',
      'weight' => 1,
  );
  // Tab 2
  $items["admin/commerce/config/advanced-settings/fraud/settings"] = array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Fraud Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('acro_fraud_admin_settings'),
      'access arguments' => array('fraud setting'),
      'access callback' => TRUE,
      'weight' => 2,
      'file' => '/includes/acro_fraud.admin.inc'
  );
  return $items;
}

function acro_fraud_theme(){
  return [
    'acro_fraud_form'=> [
      'render element' => 'form',
    ],
  ];
}

function acro_fraud_admin(){
  $form = array();
  $form['acro_fraud_test']= array(
    '#type'=>'textfield'
  );
  return $form;
}

function acro_fraud_form($form, &$form_state){
  $views_name = 'commerce_backoffice_orders';
  $display_id = 'page';

  /*
    To find your display_id go to the edit page of your view.
    There will be a list of displays at the left side of the control area.
    With out creating a view or block, "Master" will be at the top of that list.
    Hover your cursor over the name of the display you want to use. and look at the URL.
    The last word will be the display ID.
  */

  $orders = views_get_view_result($views_name , $display_id);
  asort($orders);
  $options = array();
  $reasons = array(
    'price' => 'Price',
      'pobox' => 'PO Box',
      'multi_item' => 'Quantity',
      'past_fraud_match_factor' => 'Past Fraud Match Factor',
      'past_fraud_credit_card_number_factor' => 'Past Fraud Credit Card Number Factor',
  );
  $header = array
  (
      'reason' => 'Reason',
      'fraud_score'=>'Fraud Score',
  );

  // Create an options array for the checkbox from the customer nodes. Your field
  // names will differ, look them up  via the dpm() call above. You need devel.module
  // for that.
  foreach($orders as $order) {

      calc_risk_score($order->order_id, true);
    $total_score = get_total_score($order->order_id);
    if($total_score > 0) { // Only display order if it has a score

      foreach ($reasons as $key => $value) { // Each row in a table
        $reason_score = get_score_for_reason($order->order_id, $key);
        if ($reason_score > 0) { // Only print reason if a score exists
          $options[$order->order_id][$key] = array(
              'reason' => $value,
              'fraud_score' => $reason_score,
          );
        }
      }
      $options[$order->order_id]['total_score'] = array( // The last row in each table
          'reason' => 'Total',
          'fraud_score' => $total_score,
      );
      $item_name = $order->order_id;

      $dv[$item_name] = FALSE;
      $form[$item_name] = array(
          '#type' => 'item', // Wrap the table in type item
          '#title' => 'Order ' . $item_name,
          '#tree' => TRUE,
          'submissions' => array(
              '#type' => 'tableselect',
              '#header' => $header,
              '#multiple' => TRUE,
              '#disabled' => TRUE,
              '#options' => $options[$order->order_id],

          ),
      );
    }
  }


  $form['submit'] = array(
    '#type' => 'submit',
    '#value'=>'Mark as Fraud',
    '#submit'=>array('acro_fraud_submit'),
  );
  return $form;
}
/**
 * Implements hook_uninstall().
 */
function  acro_fraud_uninstall() {

}

/**
 * Implements hook_entity_view().
 */
function acro_fraud_entity_view($entity, $entity_type, $view_mode, $langcode) {
  if ($entity_type == 'commerce_order' && in_array($view_mode, array('administrator', 'backoffice'))) {
    dpm($entity, "entity fack");

    $markup = '<div class="field commerce-backoffice-order-reason">';
    $markup .= '<div class="commerce-backoffice-order-reason-label">' . t('Risk Score Breakdown') . '</div>';
    $markup .= views_embed_view('order_risk', 'block_1', $entity->order_number);
    $markup .= '</div>';

    $entity->content['reason_status'] = [
      '#weight' => 12,
      '#markup' => $markup,
      '#access' => commerce_order_access('view', $entity),
    ];
  }
}

function acro_fraud_enable() {
  if (db_table_exists('commerce_order_risk') == FALSE AND
      db_table_exists('commerce_order_fraud') == FALSE) {
    drupal_install_schema('acro_fraud');
  }
}
/**
 * Implements hook_submit().
 *
 * Submits the selected orders into the commerce_order_fraud table
 */
function acro_fraud_submit($form, &$form_state){
  if(isset($form_state['values']['fraud_orders'])){
    foreach($form_state['values']['fraud_orders'] as $key => $value){

      //Makes sure key==val, else the value will be 0
      if($value !== 0) {

        calc_risk_score($key, true);

      }
    }
  }

}
/**
 * Constants which are the defaults for the minimum values
 * for an element to be considered risky.
 *
 * variable 'threshold' is the price at which
 * any order total greater than (closer to positive infinity)
 * the threshold will contribute to the risk score.
 *
 * variable 'po_box' is the weight associated with finding a
 * a P.O. Box address. A weight of n will always add n to the score.
 *
 */
/**
 * Puts a reason into the risk table along with its corresponding risk score.
 *
 * @param $order_id
 * @param $score
 * @param $reason
 * @return success
 */
function acro_fraud_insert_reason($order_id, $score, $reason) {
  $record = [
      'order_id' => $order_id,
      'risk_score' => $score,
      'reason' => $reason,
  ];
  // Check if the record exists and update or insert it as appropriate
  $exists = db_query('SELECT * from commerce_order_risk WHERE order_id = :oid AND reason = :r',
      array(':oid' => $order_id, ':r' => $reason))->fetchField();
  if (!($exists >= 0) && $score > 0) {
    drupal_write_record('commerce_order_risk', $record);
  }
  else {
    // If the record already exists update where necessary
    if (get_score_for_reason($order_id, $reason) != $score) {
      if ($score > 0) // Only store scores greater than zero, delete the rest
        update_score_for_reason($order_id, $reason, $score);
      else
        delete_score_for_reason($order_id, $reason);
    }
  }
  return !$exists; // Returns the success of the record being inserted.
}

function update_score_for_reason($order_id, $reason, $score) {
  $num_updated = db_update('commerce_order_risk')
      ->fields(array(
          'risk_score' => $score))
      ->condition('order_id', $order_id, '=')
      ->condition('reason', $reason, '=')
      ->execute();

  return $num_updated;
}
function delete_score_for_reason($order_id, $reason) {
  $num_deleted = db_delete('commerce_order_risk')
      ->condition('order_id', $order_id, '=')
      ->condition('reason', $reason, '=')
      ->execute();

  return $num_deleted;
}
/**
 * Calculates the risk score for an order.
 *
 * Risk score attempts to give a reasonable positive numerical value
 * to help in decisions regarding fraudulent orders. The total score is the
 * summation of scores generated from all fields of an order.
 * An order with no detectable risk will be given a zero.
 *
 * Each delegated function is responsible for storing the score it generated
 * with the associated reason in the risk table.
 */
function calc_risk_score($order_id, $storing) {
  //@Todo Determine best minimum for past fraud cc and past fraud customer
  $MIN_PAST_FRAUD_FACTOR = 8;
  $price_s = calc_price_risk($order_id);

  //Calculate the post office box risk
  $po_s = calc_po_box_risk($order_id);

  $multi_s = calc_multi_item_risk($order_id);

  // Will act as a multiplier for the past fraud scores
  $partial_score = $price_s + $po_s + $multi_s;

  //Calculate the past customer fraud score
  //Past customer fraud score adds another set of $partial_score
  //and cannot be lower than $PAST_FRAUD_FACTOR
  $past_fraud_match_factor = calc_past_fraud_order_score($order_id) * $partial_score;
  if ($past_fraud_match_factor)
    $past_fraud_match_factor = $past_fraud_match_factor < $MIN_PAST_FRAUD_FACTOR ? $MIN_PAST_FRAUD_FACTOR : $past_fraud_match_factor;

  //Calculate past credit card fraud
  //Past credit card fraud score will add another set of $partial_score
  //and cannot be lower than $PAST_FRAUD_FACTOR
  $past_fraud_credit_card_number_factor = calc_past_cc_fraud_score($order_id) * $partial_score;
  if ($past_fraud_credit_card_number_factor)
    $past_fraud_credit_card_number_factor =
        $past_fraud_credit_card_number_factor < $MIN_PAST_FRAUD_FACTOR ? $MIN_PAST_FRAUD_FACTOR : $past_fraud_credit_card_number_factor;

  if ($storing) {
      acro_fraud_insert_reason($order_id, $price_s, 'price');
      acro_fraud_insert_reason($order_id, $po_s, 'pobox');
      acro_fraud_insert_reason($order_id, $multi_s, 'multi_item');
      acro_fraud_insert_reason($order_id, $past_fraud_match_factor, 'past_fraud_match_factor');
      acro_fraud_insert_reason($order_id, $past_fraud_credit_card_number_factor, 'past_fraud_credit_card_number_factor');
  }


  //@Todo make this better?
  //Breakdown: price_risk_score and post_office_score are lower and probably more often
  //Past scores are a function of the partial score (summation of pobox, price, and multi_item reason scores)
  //and can be added onto the total
  $risk_score = $partial_score + $past_fraud_match_factor + $past_fraud_credit_card_number_factor;

  return ceil($risk_score);
}

function acro_fraud_system_settings_form($form) {
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));

  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  $form['#submit'][] = 'acro_fraud_system_settings_form_submit';
  // By default, render the form using theme_system_settings_form().
  if (!isset($form['#theme'])) {
    $form['#theme'] = 'system_settings_form';
  }
  calc_risk_score(5, true);
  recalc_all_scores();
  return $form;
}
function acro_fraud_system_settings_form_submit($form, &$form_state) {
  // Exclude unnecessary elements.
  form_state_values_clean($form_state);

  foreach ($form_state['values'] as $key => $value) {
    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }
    // Set po_box variable to be 0-10
    // Set price and multi_item to be always > 0
    if ($key == 'threshold' OR $key == 'multi_item') {
      if ($value < 1) {
        $value = 1;
      }
      if ($key == 'po_box') {
        if ($value < 0) {
          $value = 0;
        } elseif ($value > 10) {
          $value = 10;
        }
      }
    }

    variable_set($key, $value);
  }

  drupal_set_message(t('The configuration options have been saved.'));
}
/**
 * For each order currently in commerce_order_risk
 * recalculate the scores since the threshold variables have changed
 * If they scores have changed since last stored, update the values
 */
function recalc_all_scores() {
  $orders = db_query('SELECT distinct order_id FROM commerce_order_risk');
  foreach($orders as $order) {
    calc_risk_score($order->order_id, true);
  }
}
/**
 * Calculates the portion of the risk score
 * generated by the order's total price.
 *
 * The price will generate a score of 0 if the total price
 * is within the acceptable range, and 10 if the total price
 * is twice the acceptable value.
 *
 * @param $order_id
 * @param $price_max
 * @return float|int
 * @internal param $price_min
 */
function calc_price_risk($order_id) {
  $price_max = variable_get('threshold', 10000);
  $result = db_select('field_data_commerce_order_total', 'ft')
      ->fields('ft')
      ->condition('entity_id', $order_id, '=')
      ->execute()
      ->fetchAssoc();
  $order_total = $result['commerce_order_total_amount'];
  $order_total = round($order_total / 100); // Order total cents -> dollars

  if ($order_total <= $price_max)
    return 0;
  else { // Over price!

    $r_price = $order_total / $price_max;
    $price_risk = round($r_price * 5);

  }
  return $price_risk;
}

/**
 * Calculates the portion of the risk score generated by the existence
 * of a PO Box address.
 */
function calc_po_box_risk($order_id) {
  $weight = variable_get('po_box', 10);
  // Check to see if the order is going to be sent to a PO Box
  $shipping_address = db_query('SELECT commerce_customer_address_thoroughfare
   from (select commerce_customer_address_thoroughfare, cs.entity_id
         from field_data_commerce_customer_shipping cs, field_data_commerce_customer_address ca
         where ca.entity_id = cs.commerce_customer_shipping_profile_id) c
   where c.entity_id = :oid',
      array(':oid' => $order_id))->fetchField();

  if (!preg_match('/[PO.]*\s?B(ox)?.*\d+/i', $shipping_address))
    $weight = 0;



  return $weight;
}

/**
 * Calculates the portion of the risk score generated by the quantity of items in an order.
 * @param $order_id
 * @return int
 */
function calc_multi_item_risk($order_id) {
  $max_items = variable_get('multi_item', 4);
  $order = commerce_order_load($order_id);
  if ($order) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $line_items = $wrapper->commerce_line_items;
    $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
  }
  $score = $quantity - $max_items;
  if ($score < 1)
    return 0;

  return $score * 3;
}

function score_needs_update($order_id, $new_score) {
  return get_total_score($order_id) == $new_score;
}
/**
 * Gets the total risk score across all reasons for a specified order.
 *
 * @param $order_id
 * @return int
 */
function get_total_score($order_id) {
  $total = db_query('SELECT sum(risk_score) FROM commerce_order_risk WHERE order_id = :oid',
      array(':oid' => $order_id))->fetchField();
  if (empty($total))
    return 0;
  return $total;
}
function get_score_for_reason($order_id, $reason)
{
  $total = db_query('SELECT risk_score FROM commerce_order_risk WHERE order_id = :oid AND reason = :r',
      array(':oid' => $order_id, ':r' => $reason))->fetchField();
  if (empty($total))
    return 0;
  return $total;
}
/**
 * check if any past orders are fraudulent
 * increase score depending on the amount of fraudulent orders.
 * @param $order_id $this order ID to load.
 * @return int $this the amount of fraudulent matches
 */
function calc_past_fraud_order_score($order_id)
{
  $order = commerce_order_load($order_id);
  $match_factor = 0;
  $uid = $order->uid;

  //Query to get all orders for $uid
  $result = db_select('commerce_order', 'co')
      ->fields('co', array('order_id'))
      ->condition('uid', $uid, '=')
      ->execute()
      ->fetchAssoc();

  //We have all orders now for that customer.
  //Time to check if any of them are fraudulent.
  foreach ($result as $order_result) {
    $oid = $order_result;
    $fraud_result = db_select('commerce_order_fraud', 'cof')
        ->fields('cof')
        ->condition('order_id', $oid, '=')
        ->countQuery()
        ->execute()
        ->fetchField();
    if($fraud_result != 0){
      $match_factor = $fraud_result;
    }
  }

  return $match_factor;
}

/**
 * Finds all credit cards involved with a fraudulent order
 * @todo find the non-example payment payment type
 * @param $order_id
 * @return int
 */
function calc_past_cc_fraud_score($order_id){
  $match_factor = 0;

  //Selects data field from commerce_orders where the order_id matches parameter 1
  $result = db_select('commerce_order', 'co')
      ->fields('co', array('data'))
      ->condition('order_id', $order_id, '=')
      ->execute()
      ->fetchAssoc();

  //Grab the serialized data
  $serialized_data = $result['data'];

  //data is a serialized field in the database
  $data = unserialize($serialized_data);

  //Check to see if the payment information exists
  //@todo replace with non commerce_payment_example
  if(isset($data['commerce_payment_example']['credit_card'])) {

    //Grab the credit card from the array
    $credit_card = $data['commerce_payment_example']['credit_card'];

    //Grab credit number from array
    $credit_card_number = $credit_card['number'];

    //@Todo query all orders from teh fraud_table
    //@Todo load the orders from the commerce_orders table
    //@Todo un-serialize and check the credit card data

    //Select all orders form the commerce_order_fraud table
    $result = db_select('commerce_order_fraud', 'cof')
        ->fields('cof', array('order_id'))
        ->execute()
        ->fetchAssoc();
    foreach($result as $order_id){
      //loads the commerce order from the id
      $commerce_order = commerce_order_load($order_id);

      //grabs the serialized data from commerce_order
      //$commerce_order_data = $commerce_order['data'];
      $commerce_order_data = $commerce_order->data;

      $unserialized_data = $commerce_order_data;

      //Checks to see that there is a commerce_payment_example credit_card
      //@todo again, make sure when live gets on, we aren't using an example commerce_payment_example credit_card
      if(isset($unserialized_data['commerce_payment_example']['credit_card'])) {

        //loads the credit card from the unserialized_data
        $fraud_order_credit_card = $unserialized_data['commerce_payment_example']['credit_card'];

        //Grabs the number from the credit card
        $fraud_order_credit_card_number = $fraud_order_credit_card['number'];

        //If we've found a matching credit card number in a fraudulent order,
        //increase the match_factor by 1
        if($credit_card_number == $fraud_order_credit_card_number){
          $match_factor++;
        }
      }
    }
    return $match_factor;
  }

}

/**
 * Implements hook_views_api().
 */
function acro_fraud_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'acro_fraud').'/includes/view',
  );
}

/**
 * Implements hook_views_default_views().
 */
function acro_fraud_views_default_views() {

}

/**
 * Implements hook_views_data()
 */
function acro_fraud_views_data(){
  $data['commerce_order_risk']['table']['group'] = t('Order Risk');

  // Define the base table
  $data['commerce_order_risk']['table']['base'] = array(
      'field' => 'order_id', // This is the identifier field for the view.
      'title' => t('Order Risk'),
      'help' => t('Contains information about an orders risk.'),
      'weight' => -10,
  );

  // Join on commerce_order
  $data['commerce_order_risk']['table']['join'] = array(
    // Index this array by the table name to which this table refers.
    // 'left_field' is the primary key in the referenced table.
    // 'field' is the foreign key in this table.
      'commerce_order' => array(
          'left_field' => 'order_id',
          'field' => 'order_id',
      ),
  );


  // Order ID table field.
  $data['commerce_order_risk']['order_id'] = array(
      'title' => t('Order ID'),
      'help' => t('The ID of an Order'),
    // Define a relationship
      'relationship' => array(
          'base' => 'commerce_order', // The name of the table to join with.
          'base field' => 'order_id', // The name of the field on the joined table.
          'handler' => 'views_handler_relationship',
          'label' => t('Order risk'),
          'title' => t('Link orders to risk'),
          'help' => t('Links the orders to their risk'),
      ),
  );

  $data['commerce_order_risk']['reason'] = array(
      'title' => t('Reason'),
      'help' => t('The reason that determines the risk score'),
      'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE, // This is use by the table display plugin.
      ),
      'sort' => array(
          'handler' => 'views_handler_sort',
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_string',
      ),
      'argument' => array(
          'handler' => 'views_handler_argument_string',
      ),
  );

  $data['commerce_order_risk']['risk_score'] = array(
      'title' => t('Risk Score'),
      'help' => t('The risk associated with the order.'),
      'field' => array(
          'handler' => 'views_handler_field_numeric',
          'click sortable' => TRUE,
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_numeric',
      ),
      'sort' => array(
          'handler' => 'views_handler_sort',
      ),
  );

  $data['commerce_order_fraud']['table']['group'] = t('Order Fraud');

  // Define the base table
  $data['commerce_order_fraud']['table']['base'] = array(
    'field' => 'order_id', // This is the identifier field for the view.
    'title' => t('Order Fraud'),
    'help' => t('Contains fraudulent orders.'),
    'weight' => -10,
  );

  // Join on commerce_order
  $data['commerce_order_fraud']['table']['join'] = array(
    // Index this array by the table name to which this table refers.
    // 'left_field' is the primary key in the referenced table.
    // 'field' is the foreign key in this table.
    'commerce_order' => array(
      'left_field' => 'order_id',
      'field' => 'order_id',
    ),
  );


  // Order ID table field.
  $data['commerce_order_fraud']['order_id'] = array(
    'title' => t('Order ID'),
    'help' => t('The ID of an Order'),
    // Define a relationship
    'relationship' => array(
      'base' => 'commerce_order', // The name of the table to join with.
      'base field' => 'order_id', // The name of the field on the joined table.
      'handler' => 'views_handler_relationship',
      'label' => t('Fraudulent orders'),
      'title' => t('Fraudulent Orders'),
      'help' => t('Shows orders that have been marked fraudulent'),
    ),
  );


  return $data;
}

/**
 * Implements hook_views_pre_view().
 *
 * Add order_risk relationship & risk_score field. Add Views Bulk Operations for statuses.
 */
function acro_fraud_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'commerce_backoffice_orders') {
    $view->add_item($view->current_display, 'relationship', 'commerce_order_risk', 'order_id', array(
      'label' => '',
    ), 'order_risk');
    $view->add_item($view->current_display, 'field', 'commerce_order_risk', 'risk_score', array(
      'label' => 'Risk Score',
    ), 'risk_score');

    $view->display_handler->default_display->options['fields']['views_bulk_operations']['vbo_operations']['rules_component::rules_commerce_order_status_fraudulent'] = array(
      'selected' => 1,
      'postpone_processing' => 0,
      'skip_confirmation' => 0,
      'override_label' => 0,
      'label' => '',
    );
    $view->display_handler->default_display->options['fields']['views_bulk_operations']['vbo_operations']['rules_component::rules_commerce_order_status_high_risk'] = array(
      'selected' => 1,
      'postpone_processing' => 0,
      'skip_confirmation' => 0,
      'override_label' => 0,
      'label' => '',
    );

  }
}

/**
 * Implements hook_order_status_info()
 */
function acro_fraud_commerce_order_status_info(){
  $order_statuses = array();

  $order_statuses['fraudulent'] = array(
      'name' => 'fraudulent',
      'title' => t('Fraudulent (Canceled)'),
      'state' => 'canceled',
  );
  $order_statuses['high_risk'] = array(
      'name' => 'high_risk',
      'title' => t('High Risk (Pending)'),
      'state' => 'pending'
  );

  return $order_statuses;
}

/**
 * Implements hook_commerce_order_presave().
 * Check order status' to see if they have changed to or from fraudulent
 * Update commerce_order_fraud respectively.
 *
 * Also, assign the order a risk score based on the current order.
 *
 * @param $order
 * @throws Exception
 */
function acro_fraud_commerce_order_presave($order) {
  if(isset($order->original)){
    if ($order->status == $order->original->status) {
      return;
    }
    //If the original status was fraudulent delete
    if ($order->original->status == 'fraudulent' && $order->status != "fraudulent"){
      db_delete('commerce_order_fraud')->condition('order_id', $order->order_id)->execute();
      return;
    }
  }
  //If the new status is fraudulent, add
  if ($order->status == 'fraudulent'){
    db_insert('commerce_order_fraud')->fields(array('order_id' => $order->order_id))->execute();
    //Notify the admin of a new fraudulent order.
    notify_admin($order);
  }

}

/**
 * Implements hook_entity_update
 * Updates the commerce_order_risk table once the entity has been saved, i.e., on update
 * @param $order
 */
function acro_fraud_commerce_order_update($order){
  //Update the riskScore for the order
  updateOrInsertCommerceRiskScore($order);
}

/**
 * If the order doesn't exist in commerce_order_risk, insert the risk_score calculated.
 * @param $order
 */
function updateOrInsertCommerceRiskScore($order){
  $record = [
    'order_id'=>$order->order_id,
    'risk_score'=>calc_risk_score($order->order_id),
  ];
  //@Todo refactor to db_select query
  $exists = db_query('SELECT * FROM commerce_order_risk WHERE order_id=:oid',
  array(':oid'=>$order->order_id))->fetchField();

  //If the record doesn't exist, we want to update the table
  //@Todo add option for dynamic risk scores?
  if(!$exists){
    drupal_write_record('commerce_order_risk', $record);
  }
  // Calculate the score here and store the results
  calc_risk_score($order->order_id, true);
}

/**
 * Grabs the risk score from the commerce_risk_table
 * @param $order
 * @return int the risk score to return, 0 if result was null
 */
function get_commerce_risk_score($order){
  //Selects data field from commerce_orders where the order_id matches parameter 1
  $result = db_select('commerce_order_risk', 'cor')
      ->fields('cor', array('risk_score'))
      ->condition('order_id', $order->order_id, '=')
      ->execute()
      ->fetchField();
  $risk_score = $result;

  //If the result failed, return 0
  if($risk_score == null){
    $risk_score = 0;
  }
  return $risk_score;
}

/**
 * Notifies the admin once an order is determined as fraudulent.
 * @param $order
 */
function notify_admin($order){

  if(variable_get('developer_settings')){
    $email = 'tmarshall@acromediainc.com';
  } else {
    $email = variable_get('site_mail', 'tmarshall@acromediainc.com');
  }
  $message = drupal_mail('acro_fraud', 'notice', $email, 'en',  false);
}
/**
 * Implements hook_default_rules_configuration().
 */
function acro_fraud_default_rules_configuration(){
  // Set order status : High Risk
  $rules['rules_commerce_order_status_high_risk'] = entity_import('rules_config', '{ "rules_commerce_order_status_high_risk" : {
      "LABEL" : "Set order status : High Risk (Pending)",
      "PLUGIN" : "action set",
      "REQUIRES" : [ "commerce_order" ],
      "USES VARIABLES" : { "order" : { "label" : "Order", "type" : "commerce_order" } },
      "ACTION SET" : [
        { "commerce_order_update_status" : { "commerce_order" : [ "order" ], "order_status" : "high_risk" } }
      ]
    }
  }');
  // Set order status : Fraudulent
  $rules['rules_commerce_order_status_fraudulent'] = entity_import('rules_config', '{ "rules_commerce_order_status_fraudulent" : {
      "LABEL" : "Set order status : Fraudulent (Canceled)",
      "PLUGIN" : "action set",
      "REQUIRES" : [ "commerce_order" ],
      "USES VARIABLES" : { "order" : { "label" : "Order", "type" : "commerce_order" } },
      "ACTION SET" : [
        { "commerce_order_update_status" : { "commerce_order" : [ "order" ], "order_status" : "fraudulent" } }
      ]
    }
  }');

  return $rules;

}
?>
