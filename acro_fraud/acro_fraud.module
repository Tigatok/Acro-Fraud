<?php
/**
 * @file
 * Acro-Fraud main file.
 */

/**
 * Implements hook_menu()
 */
function acro_fraud_menu(){
  $items = array();
  $items['admin/commerce/config/advanced-settings/fraud'] = array(
      'title'=>'Fraud Detection',
      'page callback'=>'drupal_get_form',
      'page arguments'=> array('acro_fraud_form'),
      'access arguments' => array('administer acro_fraud settings'),
      'access callback' => TRUE,
      'type'=>MENU_NORMAL_ITEM,
  );
  // Tab 1
  $items['admin/commerce/config/advanced-settings/fraud/default'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => 'Possible Fraud',
      'weight' => 1,
  );
  // Tab 2
  $items["admin/commerce/config/advanced-settings/fraud/settings"] = array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Fraud Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('acro_fraud_admin_settings'),
      'access arguments' => array('fraud setting'),
      'access callback' => TRUE,
      'weight' => 2,
      'file' => '/includes/acro_fraud.admin.inc'
  );
  return $items;
}

function acro_fraud_theme(){
  return [
    'acro_fraud_form'=> [
      'render element' => 'form',
    ],
  ];
}

function acro_fraud_admin(){
  $form = array();
  $form['acro_fraud_test']= array(
    '#type'=>'textfield'
  );
  return $form;
}

function acro_fraud_form($form, &$form_state){
  $views_name = 'commerce_backoffice_orders';
  $display_id = 'page';

  /*
    To find your display_id go to the edit page of your view.
    There will be a list of displays at the left side of the control area.
    With out creating a view or block, "Master" will be at the top of that list.
    Hover your cursor over the name of the display you want to use. and look at the URL.
    The last word will be the display ID.
  */

  $orders = views_get_view_result($views_name , $display_id);
  asort($orders);
  $options = array();
  $reasons = array(
    'price' => 'Price',
      'pobox' => 'PO Box',
      'multi_item' => 'Quantity',
  );
  $header = array
  (
      'reason' => 'Reason',
      'fraud_score'=>'Fraud Score',
  );

  // Create an options array for the checkbox from the customer nodes. Your field
  // names will differ, look them up  via the dpm() call above. You need devel.module
  // for that.
  foreach($orders as $order) {

      calc_risk_score($order->order_id, true);
    $total_score = get_total_score($order->order_id);
    if($total_score > 0) { // Only display order if it has a score

      foreach ($reasons as $key => $value) { // Each row in a table
        $reason_score = get_score_for_reason($order->order_id, $key);
        if ($reason_score > 0) { // Only print reason if a score exists
          $options[$order->order_id][$key] = array(
              'reason' => $value,
              'fraud_score' => $reason_score,
          );
        }
      }
      $options[$order->order_id]['total_score'] = array( // The last row in each table
          'reason' => 'Total',
          'fraud_score' => $total_score,
      );
      $item_name = $order->order_id;

      $dv[$item_name] = FALSE;
      $form[$item_name] = array(
          '#type' => 'item', // Wrap the table in type item
          '#title' => 'Order ' . $item_name,
          '#tree' => TRUE,
          'submissions' => array(
              '#type' => 'tableselect',
              '#header' => $header,
              '#multiple' => TRUE,
              '#disabled' => TRUE,
              '#options' => $options[$order->order_id],

          ),
      );
    }
  }


  $form['submit'] = array(
    '#type' => 'submit',
    '#value'=>'Mark as Fraud',
    '#submit'=>array('acro_fraud_submit'),
  );
  return $form;
}
/**
 * Implements hook_uninstall().
 */
function  acro_fraud_uninstall() {

}
function acro_fraud_enable() {
  if (db_table_exists('commerce_order_risk') == FALSE AND
      db_table_exists('commerce_order_fraud') == FALSE) {
    drupal_install_schema('acro_fraud');
  }
}
/**
 * Implements hook_submit().
 */
function acro_fraud_submit($form, &$form_state){
  if(isset($form_state['values']['fraud_orders'])){
    foreach($form_state['values']['fraud_orders'] as $key => $value){
      if($value !== 0) {
        // Score is not recalculated on presave -- should it?
        calc_risk_score($key, true);

      }
    }
  }

}
/**
 * Constants which are the defaults for the minimum values
 * for an element to be considered risky.
 *
 * variable 'threshold' is the price at which
 * any order total greater than (closer to positive infinity)
 * the threshold will contribute to the risk score.
 *
 * variable 'po_box' is the weight associated with finding a
 * a P.O. Box address. A weight of n will always add n to the score.
 *
 */
/**
 * Puts a reason into the risk table along with its corresponding risk score.
 *
 * @param $order_id
 * @param $score
 * @param $reason
 * @return success
 */
function acro_fraud_insert_reason($order_id, $score, $reason) {
  $record = [
      'order_id' => $order_id,
      'risk_score' => $score,
      'reason' => $reason,
  ];
  // Check if the record exists and update or insert it as appropriate
  $exists = db_query('SELECT 1 from commerce_order_risk WHERE order_id = :oid AND reason = :r',
      array(':oid' => $order_id, ':r' => $reason))->fetchField();
  if (!$exists) {
    drupal_write_record('commerce_order_risk', $record);
  }
  else {
    // If the record already exists update where necessary
    if (get_score_for_reason($order_id, $reason) != $score) {
      update_score_for_reason($order_id, $reason, $score);
    }
  }
  return !$exists; // Returns the success of the record being inserted.
}

function update_score_for_reason($order_id, $reason, $score) {
  $num_updated = db_update('commerce_order_risk')
      ->fields(array(
          'risk_score' => $score))
      ->condition('order_id', $order_id, '=')
      ->condition('reason', $reason, '=')
      ->execute();

  return $num_updated;
}
/**
 * Calculates the risk score for an order.
 *
 * Risk score attempts to give a reasonable positive numerical value
 * to help in decisions regarding fraudulent orders. The total score is the
 * summation of scores generated from all fields of an order.
 * An order with no detectable risk will be given a zero.
 *
 * Each delegated function is responsible for storing the score it generated
 * with the associated reason in the risk table.
 */
function calc_risk_score($order_id, $storing) {
  $price_s = calc_price_risk($order_id);

  $po_s = calc_po_box_risk($order_id);

  $multi_s = calc_multi_item_risk($order_id);

  if ($storing) {
    if ($price_s > 0)
      acro_fraud_insert_reason($order_id, $price_s, 'price');
    if ($po_s > 0)
      acro_fraud_insert_reason($order_id, $po_s, 'pobox');
    if ($multi_s > 0)
      acro_fraud_insert_reason($order_id, $multi_s, 'multi_item');
  }

  return $price_s + $po_s + $multi_s;
}
function acro_fraud_system_settings_submit() {

}
function acro_fraud_system_settings_form($form) {
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));

  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  $form['#submit'][] = 'acro_fraud_system_settings_form_submit';
  // By default, render the form using theme_system_settings_form().
  if (!isset($form['#theme'])) {
    $form['#theme'] = 'system_settings_form';
  }
  calc_risk_score(5, true);
  recalc_all_scores();
  return $form;
}
function acro_fraud_system_settings_form_submit($form, &$form_state) {
  // Exclude unnecessary elements.
  form_state_values_clean($form_state);

  foreach ($form_state['values'] as $key => $value) {
    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }
    // Set po_box variable to be 0-10
    // Set price and multi_item to be always > 0
    if ($key == 'threshold' OR $key == 'multi_item') {
      if ($value < 1) {
        $value = 1;
      }
      if ($key == 'po_box') {
        if ($value < 0) {
          $value = 0;
        } elseif ($value > 10) {
          $value = 10;
        }
      }
    }

    variable_set($key, $value);
  }

  drupal_set_message(t('The configuration options have been saved.'));
}
/**
 * For each order currently in commerce_order_risk
 * recalculate the scores since the threshold variables have changed
 * If they scores have changed since last stored, update the values
 */
function recalc_all_scores() {
  $orders = db_query('SELECT distinct order_id FROM commerce_order_risk');
  foreach($orders as $order) {
    calc_risk_score($order->order_id, true);
  }
}
/**
 * Calculates the portion of the risk score
 * generated by the order's total price.
 *
 * The price will generate a score of 0 if the total price
 * is within the acceptable range, and 10 if the total price
 * is twice the acceptable value.
 *
 * @param $order_id
 * @param $price_min
 * @return float|int
 */
function calc_price_risk($order_id) {
  $price_max = variable_get('threshold', 10000);
  $result = db_select('field_data_commerce_order_total', 'ft')
      ->fields('ft')
      ->condition('entity_id', $order_id, '=')
      ->execute()
      ->fetchAssoc();
  $order_total = $result['commerce_order_total_amount'];
  $order_total = round($order_total / 100); // Order total cents -> dollars

  if ($order_total <= $price_max)
    return 0;
  else { // Over price!

    $r_price = $order_total / $price_max;
    $price_risk = round($r_price * 5);

  }
  return $price_risk;
}

/**
 * Calculates the portion of the risk score generated by the existence
 * of a PO Box address.
 */
function calc_po_box_risk($order_id) {
  $weight = variable_get('po_box', 10);
  // Check to see if the order is going to be sent to a PO Box
  $shipping_address = db_query('SELECT commerce_customer_address_thoroughfare
   from (select commerce_customer_address_thoroughfare, cs.entity_id
         from field_data_commerce_customer_shipping cs, field_data_commerce_customer_address ca
         where ca.entity_id = cs.commerce_customer_shipping_profile_id) c
   where c.entity_id = :oid',
      array(':oid' => $order_id))->fetchField();

  if (!preg_match('/[PO.]*\s?B(ox)?.*\d+/i', $shipping_address))
    $weight = 0;



  return $weight;
}

/**
 * Calculates the portion of the risk score generated by the quantity of items in an order.
 * @param $order_id
 * @return int
 */
function calc_multi_item_risk($order_id) {
  $max_items = variable_get('multi_item', 4);
  $order = commerce_order_load($order_id);
  if ($order) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $line_items = $wrapper->commerce_line_items;
    $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
  }
  $score = $quantity - $max_items;
  if ($score < 1)
    return 0;

  return $score * 3;
}

function score_needs_update($order_id, $new_score) {
  return get_total_score($order_id) == $new_score;
}
/**
 * Gets the total risk score across all reasons for a specified order.
 *
 * @param $order_id
 * @return int
 */
function get_total_score($order_id) {
  $total = db_query('SELECT sum(risk_score) FROM commerce_order_risk WHERE order_id = :oid',
      array(':oid' => $order_id))->fetchField();
  if (empty($total))
    return 0;
  return $total;
}
function get_score_for_reason($order_id, $reason) {
  $total = db_query('SELECT risk_score FROM commerce_order_risk WHERE order_id = :oid AND reason = :r',
      array(':oid' => $order_id, ':r' => $reason)) -> fetchField();
  if (empty($total))
    return 0;
  return $total;
}

/**
 * Implements hook_views_api().
 */
function acro_fraud_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'acro_fraud')
  );
}

/**
 * Implements hook_views_default_views().
 */
function acro_fraud_views_default_views() {

  $view = new view();
  $view->name = 'order_risk';
  $view->description = 'Displays the risk score of orders';
  $view->tag = 'commerce';
  $view->base_table = 'commerce_order';
  $view->human_name = 'Order Risk';
  $view->core = 0;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = 'Orders';
  $handler->display->display_options['css_class'] = 'commerce-backoffice-view';
  $handler->display->display_options['use_ajax'] = TRUE;
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'perm';
  $handler->display->display_options['access']['perm'] = 'administer commerce_order entities';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['query']['options']['query_comment'] = FALSE;
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['exposed_form']['options']['autosubmit'] = TRUE;
  $handler->display->display_options['pager']['type'] = 'full';
  $handler->display->display_options['pager']['options']['items_per_page'] = '50';
  $handler->display->display_options['style_plugin'] = 'table_megarows';
  $handler->display->display_options['style_options']['columns'] = array(
      'views_bulk_operations' => 'views_bulk_operations',
      'order_number' => 'order_number',
      'created' => 'created',
      'name' => 'name',
      'mail' => 'name',
      'commerce_order_total' => 'commerce_order_total',
      'status' => 'status',
      'operations_dropbutton' => 'operations_dropbutton',
  );
  $handler->display->display_options['style_options']['default'] = '-1';
  $handler->display->display_options['style_options']['info'] = array(
      'views_bulk_operations' => array(
          'align' => '',
          'separator' => '',
          'empty_column' => 0,
      ),
      'order_number' => array(
          'sortable' => 0,
          'default_sort_order' => 'asc',
          'align' => '',
          'separator' => '',
          'empty_column' => 0,
      ),
      'created' => array(
          'sortable' => 0,
          'default_sort_order' => 'asc',
          'align' => '',
          'separator' => '',
          'empty_column' => 0,
      ),
      'name' => array(
          'sortable' => 0,
          'default_sort_order' => 'asc',
          'align' => '',
          'separator' => '<br />',
          'empty_column' => 0,
      ),
      'mail' => array(
          'sortable' => 0,
          'default_sort_order' => 'asc',
          'align' => '',
          'separator' => '',
          'empty_column' => 0,
      ),
      'commerce_order_total' => array(
          'sortable' => 0,
          'default_sort_order' => 'asc',
          'align' => '',
          'separator' => '',
          'empty_column' => 0,
      ),
      'status' => array(
          'sortable' => 0,
          'default_sort_order' => 'asc',
          'align' => '',
          'separator' => '',
          'empty_column' => 0,
      ),
      'operations_dropbutton' => array(
          'align' => '',
          'separator' => '',
          'empty_column' => 0,
      ),
  );
  $handler->display->display_options['style_options']['empty_table'] = TRUE;
  $handler->display->display_options['row_plugin'] = 'fields';
  /* No results behavior: Commerce Order: Empty text */
  $handler->display->display_options['empty']['empty_text']['id'] = 'empty_text';
  $handler->display->display_options['empty']['empty_text']['table'] = 'commerce_order';
  $handler->display->display_options['empty']['empty_text']['field'] = 'empty_text';
  /* Relationship: Commerce Order: Referenced customer profile */
  $handler->display->display_options['relationships']['commerce_customer_billing_profile_id']['id'] = 'commerce_customer_billing_profile_id';
  $handler->display->display_options['relationships']['commerce_customer_billing_profile_id']['table'] = 'field_data_commerce_customer_billing';
  $handler->display->display_options['relationships']['commerce_customer_billing_profile_id']['field'] = 'commerce_customer_billing_profile_id';
  /* Relationship: Commerce Order: Owner */
  $handler->display->display_options['relationships']['uid']['id'] = 'uid';
  $handler->display->display_options['relationships']['uid']['table'] = 'commerce_order';
  $handler->display->display_options['relationships']['uid']['field'] = 'uid';
  /* Relationship: Order Risk: Link orders to risk */
  $handler->display->display_options['relationships']['order_id']['id'] = 'order_id';
  $handler->display->display_options['relationships']['order_id']['table'] = 'commerce_order_risk';
  $handler->display->display_options['relationships']['order_id']['field'] = 'order_id';
  $handler->display->display_options['relationships']['order_id']['label'] = 'Default label for the relationship';
  /* Field: Bulk operations: Commerce Order */
  $handler->display->display_options['fields']['views_bulk_operations']['id'] = 'views_bulk_operations';
  $handler->display->display_options['fields']['views_bulk_operations']['table'] = 'commerce_order';
  $handler->display->display_options['fields']['views_bulk_operations']['field'] = 'views_bulk_operations';
  $handler->display->display_options['fields']['views_bulk_operations']['label'] = '';
  $handler->display->display_options['fields']['views_bulk_operations']['element_label_colon'] = FALSE;
  $handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['display_type'] = '0';
  $handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['enable_select_all_pages'] = 1;
  $handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['row_clickable'] = 1;
  $handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['force_single'] = 0;
  $handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['entity_load_capacity'] = '50';
  $handler->display->display_options['fields']['views_bulk_operations']['vbo_operations'] = array(
      'rules_component::rules_commerce_order_status_canceled' => array(
          'selected' => 1,
          'postpone_processing' => 0,
          'skip_confirmation' => 0,
          'override_label' => 0,
          'label' => '',
      ),
      'rules_component::rules_commerce_order_status_cart' => array(
          'selected' => 1,
          'postpone_processing' => 0,
          'skip_confirmation' => 0,
          'override_label' => 0,
          'label' => '',
      ),
      'rules_component::rules_order_status_checkout_checkout' => array(
          'selected' => 1,
          'postpone_processing' => 0,
          'skip_confirmation' => 0,
          'override_label' => 0,
          'label' => '',
      ),
      'rules_component::rules_order_status_checkout_complete' => array(
          'selected' => 1,
          'postpone_processing' => 0,
          'skip_confirmation' => 0,
          'override_label' => 0,
          'label' => '',
      ),
      'rules_component::rules_order_status_checkout_payment' => array(
          'selected' => 1,
          'postpone_processing' => 0,
          'skip_confirmation' => 0,
          'override_label' => 0,
          'label' => '',
      ),
      'rules_component::rules_order_status_checkout_review' => array(
          'selected' => 1,
          'postpone_processing' => 0,
          'skip_confirmation' => 0,
          'override_label' => 0,
          'label' => '',
      ),
      'rules_component::rules_order_status_checkout_shipping' => array(
          'selected' => 1,
          'postpone_processing' => 0,
          'skip_confirmation' => 0,
          'override_label' => 0,
          'label' => '',
      ),
      'rules_component::rules_commerce_order_status_completed' => array(
          'selected' => 1,
          'postpone_processing' => 0,
          'skip_confirmation' => 0,
          'override_label' => 0,
          'label' => '',
      ),
      'rules_component::rules_commerce_order_status_pending' => array(
          'selected' => 1,
          'postpone_processing' => 0,
          'skip_confirmation' => 0,
          'override_label' => 0,
          'label' => '',
      ),
      'rules_component::rules_commerce_order_status_processing' => array(
          'selected' => 1,
          'postpone_processing' => 0,
          'skip_confirmation' => 0,
          'override_label' => 0,
          'label' => '',
      ),
  );
  /* Field: Commerce Order: Order number */
  $handler->display->display_options['fields']['order_number']['id'] = 'order_number';
  $handler->display->display_options['fields']['order_number']['table'] = 'commerce_order';
  $handler->display->display_options['fields']['order_number']['field'] = 'order_number';
  $handler->display->display_options['fields']['order_number']['label'] = 'ID';
  $handler->display->display_options['fields']['order_number']['link_to_order'] = 'admin';
  /* Field: User: Name */
  $handler->display->display_options['fields']['name']['id'] = 'name';
  $handler->display->display_options['fields']['name']['table'] = 'users';
  $handler->display->display_options['fields']['name']['field'] = 'name';
  $handler->display->display_options['fields']['name']['relationship'] = 'uid';
  $handler->display->display_options['fields']['name']['label'] = 'Name/Email';
  /* Field: User: E-mail */
  $handler->display->display_options['fields']['mail']['id'] = 'mail';
  $handler->display->display_options['fields']['mail']['table'] = 'users';
  $handler->display->display_options['fields']['mail']['field'] = 'mail';
  $handler->display->display_options['fields']['mail']['relationship'] = 'uid';
  $handler->display->display_options['fields']['mail']['label'] = 'Email';
  $handler->display->display_options['fields']['mail']['link_to_user'] = '0';
  /* Field: Commerce Order: Order total */
  $handler->display->display_options['fields']['commerce_order_total']['id'] = 'commerce_order_total';
  $handler->display->display_options['fields']['commerce_order_total']['table'] = 'field_data_commerce_order_total';
  $handler->display->display_options['fields']['commerce_order_total']['field'] = 'commerce_order_total';
  $handler->display->display_options['fields']['commerce_order_total']['label'] = 'Total';
  $handler->display->display_options['fields']['commerce_order_total']['click_sort_column'] = 'amount';
  $handler->display->display_options['fields']['commerce_order_total']['settings'] = array(
      'calculation' => FALSE,
  );
  /* Field: Commerce Order: Order status */
  $handler->display->display_options['fields']['status']['id'] = 'status';
  $handler->display->display_options['fields']['status']['table'] = 'commerce_order';
  $handler->display->display_options['fields']['status']['field'] = 'status';
  $handler->display->display_options['fields']['status']['label'] = 'Status';
  /* Field: Order Risk: Risk Score */
  $handler->display->display_options['fields']['risk_score']['id'] = 'risk_score';
  $handler->display->display_options['fields']['risk_score']['table'] = 'commerce_order_risk';
  $handler->display->display_options['fields']['risk_score']['field'] = 'risk_score';
  /* Field: Order Risk: Reason */
  $handler->display->display_options['fields']['reason']['id'] = 'reason';
  $handler->display->display_options['fields']['reason']['table'] = 'commerce_order_risk';
  $handler->display->display_options['fields']['reason']['field'] = 'reason';
  /* Sort criterion: Commerce Order: Updated date */
  $handler->display->display_options['sorts']['changed']['id'] = 'changed';
  $handler->display->display_options['sorts']['changed']['table'] = 'commerce_order';
  $handler->display->display_options['sorts']['changed']['field'] = 'changed';
  $handler->display->display_options['sorts']['changed']['order'] = 'DESC';
  /* Contextual filter: Commerce Order: Order ID */
  $handler->display->display_options['arguments']['order_id']['id'] = 'order_id';
  $handler->display->display_options['arguments']['order_id']['table'] = 'commerce_order';
  $handler->display->display_options['arguments']['order_id']['field'] = 'order_id';
  $handler->display->display_options['arguments']['order_id']['default_argument_type'] = 'fixed';
  $handler->display->display_options['arguments']['order_id']['summary']['number_of_records'] = '0';
  $handler->display->display_options['arguments']['order_id']['summary']['format'] = 'default_summary';
  $handler->display->display_options['arguments']['order_id']['summary_options']['items_per_page'] = '25';
  /* Filter criterion: Commerce Order: Order status */
  $handler->display->display_options['filters']['status']['id'] = 'status';
  $handler->display->display_options['filters']['status']['table'] = 'commerce_order';
  $handler->display->display_options['filters']['status']['field'] = 'status';
  $handler->display->display_options['filters']['status']['group'] = 1;
  $handler->display->display_options['filters']['status']['exposed'] = TRUE;
  $handler->display->display_options['filters']['status']['expose']['operator_id'] = 'status_op';
  $handler->display->display_options['filters']['status']['expose']['label'] = 'Filter by';
  $handler->display->display_options['filters']['status']['expose']['operator'] = 'status_op';
  $handler->display->display_options['filters']['status']['expose']['identifier'] = 'status';
  $handler->display->display_options['filters']['status']['expose']['multiple'] = TRUE;
  /* Filter criterion: Date: Date (commerce_order) */
  $handler->display->display_options['filters']['date_filter']['id'] = 'date_filter';
  $handler->display->display_options['filters']['date_filter']['table'] = 'commerce_order';
  $handler->display->display_options['filters']['date_filter']['field'] = 'date_filter';
  $handler->display->display_options['filters']['date_filter']['operator'] = 'between';
  $handler->display->display_options['filters']['date_filter']['group'] = 1;
  $handler->display->display_options['filters']['date_filter']['exposed'] = TRUE;
  $handler->display->display_options['filters']['date_filter']['expose']['operator_id'] = 'date_filter_op';
  $handler->display->display_options['filters']['date_filter']['expose']['operator'] = 'date_filter_op';
  $handler->display->display_options['filters']['date_filter']['expose']['identifier'] = 'date_filter';
  $handler->display->display_options['filters']['date_filter']['form_type'] = 'date_popup';
  $handler->display->display_options['filters']['date_filter']['date_fields'] = array(
      'commerce_order.created' => 'commerce_order.created',
  );
  /* Filter criterion: Global: Combine fields filter */
  $handler->display->display_options['filters']['combine']['id'] = 'combine';
  $handler->display->display_options['filters']['combine']['table'] = 'views';
  $handler->display->display_options['filters']['combine']['field'] = 'combine';
  $handler->display->display_options['filters']['combine']['operator'] = 'contains';
  $handler->display->display_options['filters']['combine']['exposed'] = TRUE;
  $handler->display->display_options['filters']['combine']['expose']['operator_id'] = 'combine_op';
  $handler->display->display_options['filters']['combine']['expose']['operator'] = 'combine_op';
  $handler->display->display_options['filters']['combine']['expose']['identifier'] = 'combine';
  $handler->display->display_options['filters']['combine']['fields'] = array(
      'order_number' => 'order_number',
      'name' => 'name',
      'mail' => 'mail',
  );

  /* Display: Admin page */
  $handler = $view->new_display('page', 'Admin page', 'admin_page');
  $handler->display->display_options['defaults']['hide_admin_links'] = FALSE;
  $handler->display->display_options['path'] = 'admin/commerce/order-risk';
  $handler->display->display_options['menu']['type'] = 'default tab';
  $handler->display->display_options['menu']['title'] = 'Order Risk';
  $handler->display->display_options['menu']['weight'] = '-10';
  $handler->display->display_options['tab_options']['type'] = 'normal';
  $handler->display->display_options['tab_options']['title'] = 'Order Risk';
  $handler->display->display_options['tab_options']['description'] = 'View the risk of orders in the store.';
  $handler->display->display_options['tab_options']['weight'] = '';
  $handler->display->display_options['tab_options']['name'] = 'management';

  $views[$view->name] = $view;
  return $views;
}

/**
 * Implements hook_views_data()
 */
function acro_fraud_views_data(){
  $data['commerce_order_risk']['table']['group'] = t('Order Risk');

  // Define the base table
  $data['commerce_order_risk']['table']['base'] = array(
      'field' => 'order_id', // This is the identifier field for the view.
      'title' => t('Order Risk'),
      'help' => t('Contains information about an orders risk.'),
      'weight' => -10,
  );

  // Join on commerce_order
  $data['commerce_order_risk']['table']['join'] = array(
    // Index this array by the table name to which this table refers.
    // 'left_field' is the primary key in the referenced table.
    // 'field' is the foreign key in this table.
      'commerce_order' => array(
          'left_field' => 'order_id',
          'field' => 'order_id',
      ),
  );


  // Order ID table field.
  $data['commerce_order_risk']['order_id'] = array(
      'title' => t('Order ID'),
      'help' => t('The ID of an Order'),
    // Define a relationship
      'relationship' => array(
          'base' => 'commerce_order', // The name of the table to join with.
          'base field' => 'order_id', // The name of the field on the joined table.
          'handler' => 'views_handler_relationship',
          'label' => t('Order risk'),
          'title' => t('Link orders to risk'),
          'help' => t('Links the orders to their risk'),
      ),
  );

  $data['commerce_order_risk']['reason'] = array(
      'title' => t('Reason'),
      'help' => t('The reason that determines the risk score'),
      'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE, // This is use by the table display plugin.
      ),
      'sort' => array(
          'handler' => 'views_handler_sort',
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_string',
      ),
      'argument' => array(
          'handler' => 'views_handler_argument_string',
      ),
  );

  $data['commerce_order_risk']['risk_score'] = array(
      'title' => t('Risk Score'),
      'help' => t('The risk associated with the order.'),
      'field' => array(
          'handler' => 'views_handler_field_numeric',
          'click sortable' => TRUE,
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_numeric',
      ),
      'sort' => array(
          'handler' => 'views_handler_sort',
      ),
  );

  return $data;
}

/**
 * Implements hook_order_status_info()
 */
function acro_fraud_commerce_order_status_info(){
  $order_statuses = array();

  $order_statuses['fraudulent'] = array(
      'name' => 'fraudulent',
      'title' => t('Fraudulent (Canceled)'),
      'state' => 'canceled',
  );
  $order_statuses['high_risk'] = array(
      'name' => 'high_risk',
      'title' => t('High Risk (Pending)'),
      'state' => 'pending'
  );

  return $order_statuses;
}

/**
 * Implements hook_commerce_order_presave().
 */
function acro_fraud_commerce_order_presave($order) {
  drupal_set_message("Chicken");
  if ($order->status == $order->original->status) {} //If the status hasn't changed do nothing
  else if ($order->status == 'fraudulent'){
    //New status is fraudulent. Add to fraud table.
    db_insert('commerce_order_fraud')->fields(array('order_id' => $order->order_id))->execute();
    notify_admin($order);
  }
  else if ($order->original->status == 'fraudulent'){
    //Old status is fraudulent. Remove from fraud table.
    db_delete('commerce_order_fraud')->condition('order_id', $order->order_id)->execute();
  }
  // Calculate the score here and store the results
  calc_risk_score($order->order_id, true);
}

/**
 * Notifies the admin once an order is determined as fraudulent.
 * @param $order
 */
function notify_admin($order){
//  if(variable_get('developer_settings')){
//    $email = 'tmarshall@acromediainc.com';
//  } else {
//    $email = variable_get('site_mail', 'tmarshall@acromediainc.com');
//  }
//  $message = drupal_mail('acro_fraud', 'notice', $email, 'en',  false);
//  dpm($message, "message");
}
?>
